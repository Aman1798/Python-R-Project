employees <- read.csv(Employees_path)
shopping <- read.csv(Shopping_path)
vitals <- read.csv(Vitals_path)
#Using head Function
head(employees)
head(shopping)
head(vitals)
fix(employees)
fix(employees)
# Define file paths
Employees_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Employee.csv"
Shopping_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Shopping.csv"
Vitals_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Vitals.csv"
#(e) Create dataframes using read.csv()
employees <- read.csv(Employees_path)
shopping <- read.csv(Shopping_path)
vitals <- read.csv(Vitals_path)
#Using head Function
attach(employees)
head(employees)
attach(shopping)
head(shopping)
attach(vitals)
head(vitals)
fix(employees)
#(g)Vitals dataframe without decimals
Vitals$Result <- round(Vitals$Result, 0)
#(g)Vitals dataframe without decimals
Vitals$Result <- round(vitals$Result, 0)
#(g)Vitals dataframe without decimals
vitals$Result <- round(vitals$Result, 0)
print(vitals)
fix(employees)
fix(employees)
rowSums(employees)
missing_values<- is.na(employee)
missing_values<- is.na(employees)
rowSums(employees)
# Create a logical matrix indicating the presence of missing values (NA)
missing_values<- is.na(employees)
row_missing <- which(rowSums(missing_values_matrix) > 0)
row_missing <- which(rowSums(missing_values) > 0)
col_missing <- which(colSums(missing_values) > 0)
print(row_missing)
print(col_missing)
fix(employees)
# Create a logical matrix indicating the presence of missing values (NA)
missing_values<- is.na(employees)
row_missing <- (rowSums(missing_values) > 0)
col_missing <- (colSums(missing_values) > 0)
print(row_missing)
print(col_missing)
missing_values<- is.na(employees)
row_missing <- which(rowSums(missing_values) > 0)
col_missing <- which(colSums(missing_values) > 0)
print(row_missing)
print(col_missing)
#(b)records with missing values-complete.cases()
missing_values<- complete.cases(employees)
records_missing_values<- employees(!missing_values)
#(b)records with missing values-complete.cases()
missing_values<- complete.cases(employees)
records_missing_values<- employees[!missing_values,]
print(records_missing_values)
#(c)new data frame, Employee2
employees2<- na.omit(employees)
print(employees2)
describe(employee2)
#(d)min,max,mean,sd-AGE
summary(employees)
summary(employees2)
#(d)min,max,mean,sd-AGE
summary(employees$Age)
summary(employees2$Age)
#(d)min,max,mean,sd-AGE
summary(employees$Age)
sd(employees$Age)
summary(employees2$Age)
sd(employees2$Age)
sd(Employee$Age, na.rm = FALSE)
sd(employees$Age, na.rm = FALSE)
sd(employees$Age, na.rm = True)
sd(employees$Age, na.rm = TRUE)
#4Creating New Variables
#(a)Create new columns Increase and NewSalary
employees$Increase<- 0.07*employees$Salary
employees$NewSalary<- employees$Salary + employees$Increase
head(employees)
#(b)Do task 4a for employees2
employees2$Increase<- 0.03*employees2$Salary
employees2$NewSalary<- employees2$Salary + employees2$Increase
head(employees2)
#(c)absolute value of the difference
new_salary_employee <- mean(Employee$NewSalary, na.rm = TRUE)
#(c)absolute value of the difference
new_salary_employees <- mean(employees$NewSalary, na.rm = TRUE)
new_salary_employees2 <- mean(employees2$NewSalary)
abs(new_salary_employeez - new_salary_employees2)
#(c)absolute value of the difference
new_salary_employees <- mean(employees$NewSalary, na.rm = TRUE)
new_salary_employees2 <- mean(employees2$NewSalary)
abs(new_salary_employees - new_salary_employees2)
employee3<- order(employees$Age, decreasing = TRUE, na.last = FALSE)
head(employee3)
employee3<- order(employees, decreasing = TRUE, na.last = FALSE)
employees3<- order(employees, decreasing = TRUE, na.last = FALSE)
employees3<- order(employees%Age, decreasing = TRUE, na.last = FALSE)
employees3<- order(employees$Age, decreasing = TRUE, na.last = FALSE)
head(employees3)
head(employees)
employees3<- data.frame(employees)
head(employees3)
employees3<-order(employees3$Age, decreasing = TRUE, is.na(employees3$Age))
head(employees3)
print(employees3)
#5 Sorting data
employeess3 <- employees[order(-employees$Age, employees$Salary, na.last = TRUE), ]
head(employeess3)
#5 Sorting data
employeess3 <- employees[order(-employees$Age, employees$Salary, na.last = FALSE), ]
head(employeess3)
position_duplicate_elements<- duplicated(employees$Age)
print(position_duplicate_elements)
Uniq_Age<- unique(employees)
print(Uniq_Age)
Uniq_Age<- unique(employees$Age)
print(Uniq_Age)
Uniq_Age<- employee[!position_duplicate_elements,]
Uniq_Age<- employees[!position_duplicate_elements,]
print(Uniq_Age)
Uniq_Age_vec <- !duplicated(Employee$Age) | duplicated(Employee$Age, fromLast = TRUE)
Uniq_Age_vec <- !duplicated(employees$Age) | duplicated(employees$Age, fromLast = TRUE)
print(Uniq_Age_vec)
Uniq_Age_vec <- !position_duplicate_elements | position_duplicate_elements
print(Uniq_Age_vec)
Uniq_Age_vec <- !position_duplicate_elements | position_duplicate_elements
print(Uniq_Age_vec)
Mul_con1<- employees$Age<40 & employees$Gender = "Male"
Mul_con1<- employees[which(employees$Age<40 & employees$Gender = "Male"),]
Mul_con1<- employees[which(employees$Age<40 & employees$Gender == "Male"),]
print(Mul_con1)
#(b)
emp_newage<- employees[which(employees$Age>=40 | employees$Age<20),]
print(emp_newage)
Salary_group <- mutate(employees, employees$Salary = ifelse(Salary >= 50000, "High",
employees <- mutate(employees, Salary_group = ifelse(Salary >= 50000, "High",
ifelse(Salary > 20000, "Medium", "Low")))
library(dplyr)
#8 Conditional Processing
employees <- mutate(employees, Salary_group = ifelse(Salary >= 50000, "High",
ifelse(Salary > 20000, "Medium", "Low")))
head(employees)
Shopping<-read.csv(“Shopping.csv”
shopping <- read.csv(Shopping_path)
shopping <- c(“Brand”, “Safety”, “Look”)
#(b)new dataframe Sub_shop
shop_new <- c("Brand", "Safety", "Look")
Sub_shop <- shopping[, shop_new]
head(Sub_shop)
head(shopping)
Sub_shop <- shopping[c(0:3,5,7)]
head(Sub_shop2)
Sub_shop2 <- shopping[c(0:3,5,7)]
head(Sub_shop2)
Sub_shop2 <- shopping[c(0:3,5,7,8)]
head(Sub_shop2)
fix(Sub_shop)
fix(Sub_shop)
fix(Sub_shop)
trimws(phrase)
phrase<-" Some text to test functions in R "
#(b)
trimws(phrase)
phrase<-"Something to test functions in R”
emp1<- employees[c(0,-1)]
head(emp1)
#10 remove whitespace and string substitution.
#(a)
phrase<-" Some text to test functions in R "
Employees_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Employee.csv"
Shopping_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Shopping.csv"
Vitals_path <- "~/Desktop/OneDrive_Aman/DataScience/SEM2/BigData/Lab1/Vitals.csv"
employees <- read.csv(Employees_path)
emp1<- employees[c(0,-1)]
head(emp1)
emp1 <- Employees[c(1, nrow(Employees)), ]
emp1 <- employees[c(1, nrow(employees)), ]
head(emp1)
typeof(Employee$Travel)
typeof(employee$Travel)
typeof(employees$Travel)
emp2<- c[(1,nrow(employees)),]
emp2<- employees[c(1,nrow(employees)),]
head(emp2)
#(d)
emp3<- employees[c(employees$Emp_Id = 10212, employees$Emp_Id = 10188)]
emp3<- employees[c(employees$Emp_Id == 10212, employees$Emp_Id = 10188)]
emp3<- employees[employees$Emp_Id %in% c(10212, 10188)]
emp3<- employees[employees$Emp_Id %in% c(10212, 10188), c("Emp_Id")]
head(emp3)
install.packages("openair")
# install.packages("pak")
pak::pak("davidcarslaw/openair")
library(openair)
kc1 <- importAURN(site = "kc1", year = 2020)
kc1
library(openair)
kc1 <- importAURN(site = "kc1", year = 2022)
kc1
sub <- selectByDate(kc1,
day = "weekday",
year = 2020,
month = 6:9,
hour = 7:19
)
sub
sub2 <- timeAverage(kc1, avg.time = "2 week")
sub2
library(datasets)  # Load built-in datasets
library(datasets)  # Load built-in datasets
head(iris)
summary(iris)
plot(iris)
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")
# Learning plotting and visualisation (Iris Dataset)
plot(iris$Species) #Categorical variable
library(datasets)  # Load built-in datasets
data(iris)
head(iris)
summary(iris)
plot(iris)
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")
# Learning plotting and visualisation (Iris Dataset)
plot(iris$Species) #Categorical variable
plot(iris$Petal.Length) #Quantitative variable
plot(iris$Species, iris$Petal.Width) #Categorical x Quantitative
plot(iris$Petal.Length, iris$Petal.Width) #Quantitative
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", #hex code for datalab.cc red
pch = 19, #use solid circles for points
main = "Iris : Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
#plot formulas with plot()
plot (cos,0,2*pi)
plot(exp, 1,5)
plot(dnorm, -3,+3) #Density of normal distb
plot(dnorm, -3,+3,
col = "#cc0000",
lwd = 5, #Line Width
main = "Standard Normal Distb",
xlab = "Z-scores",
ylab = "Density")
################################################################################################
# scatter plot
################################################################################################
data(mtcars)
?mtcars
head(mtcars)
# Load built-in datasets
data(iris)
# Show first few rows of the iris dataset
head(iris)
library(datasets)
# Load built-in datasets
data(iris)
# Show first few rows of the iris dataset
head(iris)
# Summary statistics of the iris dataset
summary(iris)
# Plot the iris dataset
plot(iris)
# Detach the datasets package
detach("package:datasets", unload = TRUE)
# Clear any existing plots
dev.off()  # But only if there IS a plot
# Clear the console
cat("\014")
# Learning plotting and visualisation (Iris Dataset)
# Plotting categorical variable
plot(iris$Species)
# Plotting quantitative variable
plot(iris$Petal.Length)
# Plotting categorical vs quantitative variable
plot(iris$Species, iris$Petal.Width)
# Plotting two quantitative variables
plot(iris$Petal.Length, iris$Petal.Width)
# Customize plot appearance
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # hex code for datalab.cc red
pch = 19, # use solid circles for points
main = "Iris: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plotting functions
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3) # Density of normal distribution
# Customizing plot appearance for density plot
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5, # Line Width
main = "Standard Normal Distribution",
xlab = "Z-scores",
ylab = "Density")
# Scatter plot
plot(mtcars$wt, mtcars$mpg,
xlab = "Weight (1000 lbs)",
ylab = "Miles per gallon",
main = "Motor Trend Car Road Tests",
cex.axis = 1.5, cex.lab = 1.5, pch = 16, col = "blue")
library(datasets)
# Load built-in datasets
data(iris)
# Show first few rows of the iris dataset
head(iris)
# Summary statistics of the iris dataset
summary(iris)
# Plot the iris dataset
plot(iris)
# Detach the datasets package
detach("package:datasets", unload = TRUE)
# Clear any existing plots
dev.off()  # But only if there IS a plot
# Clear the console
cat("\014")
# Learning plotting and visualisation (Iris Dataset)
# Plotting categorical variable
plot(iris$Species)
# Plotting quantitative variable
plot(iris$Petal.Length)
# Plotting categorical vs quantitative variable
plot(iris$Species, iris$Petal.Width)
# Plotting two quantitative variables
plot(iris$Petal.Length, iris$Petal.Width)
# Customize plot appearance
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # hex code for datalab.cc red
pch = 19, # use solid circles for points
main = "Iris: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plotting functions
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3) # Density of normal distribution
# Customizing plot appearance for density plot
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5, # Line Width
main = "Standard Normal Distribution",
xlab = "Z-scores",
ylab = "Density")
# Load mtcars dataset
data(mtcars)
# Scatter plot
plot(mtcars$wt, mtcars$mpg,
xlab = "Weight (1000 lbs)",
ylab = "Miles per gallon",
main = "Motor Trend Car Road Tests",
cex.axis = 1.5, cex.lab = 1.5, pch = 16, col = "blue")
library(datasets)
# Load built-in datasets
data(iris)
# Show first few rows of the iris dataset
head(iris)
# Summary statistics of the iris dataset
summary(iris)
# Plot the iris dataset
plot(iris)
# Detach the datasets package
detach("package:datasets", unload = TRUE)
# Clear any existing plots
dev.off()  # But only if there IS a plot
# Clear the console
cat("\014")
# Learning plotting and visualisation (Iris Dataset)
# Plotting categorical variable
plot(iris$Species)
# Plotting quantitative variable
plot(iris$Petal.Length)
# Plotting categorical vs quantitative variable
plot(iris$Species, iris$Petal.Width)
# Plotting two quantitative variables
plot(iris$Petal.Length, iris$Petal.Width)
# Customize plot appearance
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # hex code for datalab.cc red
pch = 19, # use solid circles for points
main = "Iris: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plotting functions
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3) # Density of normal distribution
# Customizing plot appearance for density plot
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5, # Line Width
main = "Standard Normal Distribution",
xlab = "Z-scores",
ylab = "Density")
# Load mtcars dataset
#data(mtcars)
# Scatter plot
#plot(mtcars$wt, mtcars$mpg,
#xlab = "Weight (1000 lbs)",
#ylab = "Miles per gallon",
#main = "Motor Trend Car Road Tests",
#cex.axis = 1.5, cex.lab = 1.5, pch = 16, col = "blue")
# Scatter plot for multivariate data
plot(iris)
# Mix of continuous and categorical variables
print(iris$Petal.Length)
hist(iris$Petal.Length, breaks = 50)
table(iris$Petal.Length)
print(iris$Species)
table(iris$Species)
matplot(as.numeric(iris$Species), iris$Petal.Length,
col = "blue", pch = 19, xlab = "Species", ylab = "Petal length")
# ggplot intro
library(ggplot2)
# Scatter plot using ggplot
ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_point(col = "red") +
labs(x = "Species", y = "Petal length", title = "Continuous vs Categorical") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16)) +
theme(axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold"))
# Boxplot using ggplot
ggplot(iris, aes(x = Species, y = Petal.Length)) +
stat_boxplot(geom = 'errorbar', width = 0.25) +
geom_boxplot()
# Load necessary libraries
library(datasets)
library(ggplot2)
# Load built-in dataset 'iris'
data(iris)
# Show first few rows of the iris dataset
head(iris)
# Summary statistics of the iris dataset
summary(iris)
# Plot the iris dataset
plot(iris)
# Detach the datasets package to avoid conflicts
detach("package:datasets", unload = TRUE)
# Clear any existing plots if there is one
if (!is.null(dev.list())) dev.off()
# Clear the console
cat("\014")
# Exploratory Data Analysis (EDA) and Visualization of the Iris Dataset
# Plotting categorical variable (Species)
plot(iris$Species)
# Plotting quantitative variable (Petal Length)
plot(iris$Petal.Length)
# Plotting categorical vs quantitative variable (Species vs Petal Width)
plot(iris$Species, iris$Petal.Width)
# Plotting two quantitative variables (Petal Length vs Petal Width)
plot(iris$Petal.Length, iris$Petal.Width)
# Customizing plot appearance for Petal Length vs Petal Width
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000", # red color
pch = 19,        # solid circles for points
main = "Iris: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plotting functions
plot(cos, 0, 2*pi)   # Cosine function
plot(exp, 1, 5)       # Exponential function
plot(dnorm, -3, +3)   # Density of normal distribution
# Customizing plot appearance for density plot
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,           # Line Width
main = "Standard Normal Distribution",
xlab = "Z-scores",
ylab = "Density")
# Scatter plot for multivariate data
plot(iris)
# Mix of continuous and categorical variables for Petal Length
print(iris$Petal.Length)
hist(iris$Petal.Length, breaks = 50)
table(iris$Petal.Length)
# Mix of continuous and categorical variables for Species
print(iris$Species)
table(iris$Species)
# Scatter plot for Petal Length vs Species
matplot(as.numeric(iris$Species), iris$Petal.Length,
col = "blue", pch = 19, xlab = "Species", ylab = "Petal length")
# Introduction to ggplot2 for advanced plotting
# Scatter plot using ggplot2
ggplot(data = iris, mapping = aes(x = Species, y = Petal.Length)) +
geom_point(col = "red") +
labs(x = "Species", y = "Petal length", title = "Continuous vs Categorical") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16)) +
theme(axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold"))
# Boxplot using ggplot2
ggplot(iris, aes(x = Species, y = Petal.Length)) +
stat_boxplot(geom = 'errorbar', width = 0.25) +
geom_boxplot()
